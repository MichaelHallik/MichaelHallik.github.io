<h1)Enter the homo universalis</h1>.

As testers we are expected to approach the ideal of the homo universalis. A species of humankind that is generally deemed to be extinct.

I believe there is no other role within the software development domain, that carries with it such a wealth of expectations and demands. Especially, since these expectations and demands exist on so many different planes.

For starters, we need to be well versed within the traditional testing realm (think TMap/ISTQB), which in and onto itself requires <i>years</i> of study and experience. Not only in terms of the quantity and complexitiy of the involved techniques, processes and patterns, but also in terms of all sorts of tools: test management tools, test design tools, defect management tools, risk analysis tools, etc. Mastering all of this is intellectually very challenging and demanding.

Additionally we need to be savvy and versatile test automation engineers as well. That requires us to master, for instance, multiple test automation languages (Java, Python, Javascript and others), database related skills (e.g. multiple DBMS's, SQL) and test APIs (e.g. Selenium, Cypress). Additionally, we need to be adept at all sorts of technical, low-level test automation interfaces (e.g. HTTP, REST, SOAP, database-APIs, XPath) and a plethora of various types of automation tools, such as generic test automation tools, ATTD/BDD/TDD tools and all kinds of specialized technical test tools: Robot Framework, pytest, Fitnesse, Cucumber, JBehave, POSTMAN, REST-assured, Soap-UI, cURL, HP UFT, Tricentis Tosca, etc., etc., etc, etc, etc. and etc. Of course,apart from being able to utilize such tools,  we also need to fully understand (and be able to apply) the processes and patterns involved in TDD, BDD, ATDD and the likes as well. Naturally, to be able to c reate future-proof (i.e. maintainable, scalable, portable, etc._ test automation solutions, we need to be adept in applying alle sorts of relevante design patterns and best practices.

Not only that, increasingly we are expected to be well versed when it comes to CI/CD, both in terms of designing, implementing or (at the very least) integrating with complex, heterogeous pipelines and in terms of mastering all of the relevant tools. We are getting more and more involved in the practices, patterns, tools and techniques surrounding trends such as Devops and Cloud Native Computing. For instance, we need to know, understand and have experience with regard to containerization and the orchestration thereof. Whether it be AWS, Azure, Jenkins, Bamboo, Docker or Kubernetes: we need to be able to utilize all of them now or at some point in the near future.

Of course, we also need great communication and other soft skills, for instance to gain commitment end buy-in of management and practitioners with regards to our test (automation) approaches, specifically our test (automation) strategies.

I am then supposed to also happily perform the role of Scrum Master if need be. :-) 

Like a true homo universalis.

We euphemistically call that: 'T-shaped'. :-)

But if one starts to really think about it, then very soon one must come to the conclusion that it is nearly impossible to be an effective and valuable generalist with regard to disciplines such as traditional testing, test automation or CI/CD. Not only is it impossible, but when critically examining the actual expectations and demands (of management and fellow team members alike) with regard to my knowledge, skills and experience as a 'tester', then it is evident that they, too, expect me to be an expert in traditional testing, test automation and CI/CD at the same time. They don't want me to be a generalist on <i>any</i> of these fields.

And I <i>do</i> want to be an expert. Ever since I started as a junior tester (some twenty-odd years ago), I have been studying my b**t off. I still do. And happily so, as I enjoy extending my knowledge, enhancing my skills and developing my professionalism.

Having said that, nowadays I every so often feel that it is not only becoming increasingly difficult to maintain this status of homo universalis, but that it is becoming downright impossible to do so. Simply because of the insane rate at which new developments follow up on each other, in combination with the (rather massive) diversification of the engineering fields that these developments take place in.

And it is definitely not just me. I see my fellow testers struggle with this every day. They are often unwittingly pressurized into their so-called 'T-shaped' roles. At the same time they feel overwhelmed by them, because of the breadth and depth of the required knowledge and skills.

I believe we need to 

---